# Default values for nginx-sandbox

# nameOverride -- Override name of app
nameOverride: ""
# fullnameOverride -- Override the full qualified app name
fullnameOverride: ""
# replicaCount -- Number of desired nginx pods of StatefulSet
replicaCount: 3
# clusterName -- Name of Kubernetes cluster
clusterName: ""
# resolverName -- Name of Service of DNS resolver
resolverName: kube-dns
# resolverNamespace -- Namespace which belongs DNS resolver
resolverNamespace: kube-system

## StatefulSet of nginx
nginx:
  image:
    repository: nginx
    tag: "1.27.4"
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  securityContext: {}
  nginxConf: |
    user  nginx;
    worker_processes  auto;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
      access_log  /dev/stdout main;
      error_log   /dev/stderr;
      sendfile        on;
      keepalive_timeout  65;
      include /etc/nginx/conf.d/*.conf;
    }
  # defaultRedirectLocations -- If true, create locations that redirects to other nginx, httpbin and app
  defaultRedirectLocations: true
  # defaultServerName -- Server name of default server
  defaultServerName: _
  # defaultClusterResolver -- If true, set DNS resolver service to the default server
  defaultClusterResolver: true
  # defaultServer -- Content of the server context of the default server
  defaultServer: |
    location = /health {
      access_log off;
      return 200;
    }
  # otherConf -- Content of the other conf file
  otherConf: ""
  labels: {}
  annotations: {}
  resources: {}
  tolerations: []
  affinity: {}
  nodeSelector: {}
  portName: http
  portNumber: "8080"
  restartPolicy: Always
  livenessProbe:
    httpGet:
      path: /health
      port: http
  readinessProbe:
    httpGet:
      path: /health
      port: http
## Deployment for curl
bastion:
  # bastion.enabled -- If true, create bastion
  enabled: true
  image:
    repository: curlimages/curl
    tag: "8.11.1"
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  securityContext: {}
  labels: {}
  annotations: {}
  resources: {}
  tolerations: []
  affinity: {}
  nodeSelector: {}
## Deployment of small python application
app:
  image:
    repository: python
    tag: "3.13.1"
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  securityContext: {}
  conf:
    # app.conf.requirements -- Python requirements
    requirements: |
      uvicorn==0.34.0
      fastapi==0.115.6
    # app.conf.main -- Main script
    main: |
      from fastapi import FastAPI
      app = FastAPI()
      @app.get("/health")
      def health():
        return "OK"
  annotations: {}
  labels: {}
  resources: {}
  tolerations: []
  affinity: {}
  nodeSelector: {}
  portName: http
  portNumber: 8080
  portContainer: 8000
  restartPolicy: Always
  livenessProbe:
    httpGet:
      path: /health
      port: http
  readinessProbe:
    httpGet:
      path: /health
      port: http
httpbin:
  image:
    repository: kong/httpbin
    tag: "0.2.3"
    pullPolicy: IfNotPresent
  imagePullSecrets: []
  securityContext: {}
  annotations: {}
  labels: {}
  resources: {}
  tolerations: []
  affinity: {}
  nodeSelector: {}
  portName: http
  portNumber: 8080
  portContainer: 80
  restartPolicy: Always
  livenessProbe:
    httpGet:
      path: /status/200
      port: http
  readinessProbe:
    httpGet:
      path: /status/200
      port: http
